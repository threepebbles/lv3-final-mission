name: Backend CD on develop branch

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write

jobs:
  test-and-push-docker-image:
    runs-on: ubuntu-latest

    steps:
      # git clone
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 서브모듈 불러오기
          submodules: true
          # 전체 히스토리 가져오기 (서브모듈 안정성 위해 권장)
          fetch-depth: 0
          # 중첩된 서브모듈까지 불러오기
          recursive: true
          token: ${{ secrets.PAT_FOR_SUBMODULE }}

      # Java 21 버전
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # GitHub Storage에 빌드 관련 파일들을 캐싱하여 빌드 속도 개선
      - name: Gradle Caching
        uses: actions/cache@v4
        # caches: 의존성 캐싱을 통해 의존성 다운로드 속도 개선
        # wrapper: Gradle 자체 캐싱을 통해 Gradle 다운로드 속도 개선
        # build-cache: gradle task 결과 캐싱을 통해 task 실행 속도 개선
        with:
          path: |
            ~/.gradle/caches 
            ~/.gradle/wrapper
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 빌드 진행(테스트 포함)
      - name: Build with Gradle
        run: ./gradlew build --no-configuration-cache

      # 테스트에 대한 리포트 작성
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      # 테스트 실패 시, 실패한 코드 라인에 Check 코멘트 등록
      - name: Comment to test failed code line
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          token: ${{ github.token }}

      # Github Container Registry 로그인
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_FOR_GHCR }}

      # Docker buildx 셋업
      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # repository owner 이름 소문자로 치환 (대문자 있으면 에러 발생하므로 꼭 필요)
      - name: set owner's name to lower case
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      # Docker 이미지 빌드 및 Github Container Registry에 push
      - name: Build and Push
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: .
          file: ./lv3-final-config/dev/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/lv3-final-spring-dev:latest
            ghcr.io/${{ env.OWNER_LC }}/lv3-final-spring-dev:dev-${{ github.run_number }}

  deploy-on-ec2:
    name: Deploy on EC2 (dev environment)
    runs-on: [ self-hosted, dev ]
    needs: test-and-push-docker-image

    steps:
      # docker-compose.yml을 불러오기 위함
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
          recursive: true
          token: ${{ secrets.PAT_FOR_SUBMODULE }}

      - name: Check application-dev.yml
        run: ls -l $GITHUB_WORKSPACE/lv3-final-config/dev/application-dev.yml

      - name: Print working directory
        run: pwd

      # GHCR 로그인
      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.PAT_FOR_GHCR }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      # 최신 docker 이미지 pull
      - name: Pull docker images
        run: docker compose -f lv3-final-config/dev/docker-compose.yml pull

      # 기존 컨테이너 종료 및 제거
      - name: Stop and Remove Old Containers
        run: docker compose -f lv3-final-config/dev/docker-compose.yml down

      # 새 docker 컨테이너 실행
      - name: Start Containers
        run: docker compose -f lv3-final-config/dev/docker-compose.yml up -d

      # dangling 이미지(아무 태그도 붙어 있지 않은 이미지) 삭제
      - name: Cleanup old docker images
        run: docker image prune -f
